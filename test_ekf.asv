
function [avr_err_EKF, std_err_EKF] = test_ekf(SoC_upd_init, current)
    %% Initialization -----------------------------------------------
    ts  = 1;  % smaple interval
    tr = 0.1;  % smallest time interval uesd to simulate the real SOC
    % N = 3600/ts;  % total sampling times
    N = 5000;
    Capacity = 0.8;
    SoC_real(1, 1) = 1;  % Initial real SoC value
    States_real = [SoC_real(1, 1); 0];  % (SoC_real, Up_real)
    States_upd = [SoC_upd_init; 0];  % (SOC_upd, Up_upd)
    SoC_AH(1,1) = SoC_upd_init;  % Initail value of AH
    SoC_EKF(1,1) = SoC_upd_init;
    % Errors
    Err_EKF = zeros(1, N);
    Err_AH = zeros(1, N);
    Err_EKF(1,1) = SoC_real(1,1) - States_upd(1,1);  % Error of EKF
    Err_AH(1,1) = SoC_real(1,1) - SoC_AH(1,1);  % Error of AH

    % EKF parameters
    P_Cov = [1e-8 0; 0 1e-6];  % covariance matrix
    Qs = 4e-9;  % variance of the SoC process noise, also for UKF
    Qu = 1e-8;  % variance of the Up process noise
    R = 1e-6;  % variance of observation noise, also for UKF
    I_real = current;

    % SoC estimation process  ---------------------------------------
    for T = 2 : N
        %% Simulating the real states -------------------------------
        for t = (T-1) * ts/tr - (ts/tr - 2) : (T-1) * ts/tr + 1
            Rp1 = 0.035 + 0.0844*SoC_real(1, t-1) - 0.302*SoC_real(1, t-1)^2 + 0.372*SoC_real(1, t-1)^3 - 0.141*SoC_real(1, t-1)^4 ;
            Rp2 = -0.6024 + 12.04*SoC_real(1, t-1) - 43.66*SoC_real(1, t-1)^2 + 61.29*SoC_real(1, t-1)^3 - 29.34*SoC_real(1, t-1)^4;
            % Cp1 = 4.692 + 2.813*SoC_real(1, t-1) - 26.27*SoC_real(1, t-1)^2 + 115.2*SoC_real(1, t-1)^3 - 264.8*SoC_real(1, t-1)^4 + 327.6*SoC_real(1, t-1)^5 - 205.5*SoC_real(1, t-1)^6 + 50.6*SoC_real(1, t-1)^7;
            % Cp2 = -271.3 + 8012*SoC_real(1, t-1) - 68710*SoC_real(1, t-1)^2 + 278600*SoC_real(1, t-1)^3 - 60000*SoC_real(1, t-1)^4 + 707300*SoC_real(1, t-1)^5 - 431500*SoC_real(1, t-1)^6 + 106600*SoC_real(1, t-1)^7;
            Cp1 = 4.692 + 2.813*SoC_real(1, t-1) - 26.27*SoC_real(1, t-1)^2 + 115.2*SoC_real(1, t-1)^3 - 264.8*SoC_real(1, t-1)^4;
            Cp2 = -271.3 + 8012*SoC_real(1, t-1) - 68710*SoC_real(1, t-1)^2 + 278600*SoC_real(1, t-1)^3 - 60000*SoC_real(1, t-1)^4;

            tao = Rp1*Cp1 + Rp2*Cp2;
            A2 = exp(-tr / tao);
            A =[1 0; 0 A2];  % State transformation matrix
            B1 = - tr / (Capacity * 3600);
            B2 = (Rp1+Rp2) * (1 - exp(-tr / tao));
            B = [B1; B2];  % Input control matrix
            
            States_real(:, t) = A * States_real(:, t-1) + B * I_real(1, t) + [sqrt(Qs) * randn; sqrt(Qu) * randn];
            SoC_real(1, t) = States_real(1, t);
        end
        UOC_real = 3.11 + 3.3296*States_real(1, t) - 8.294*States_real(1, t)^2 + 9.491*States_real(1, t)^3 -3.437*States_real(1, t)^4;
        Rint_real = 0.24 - 0.1413*States_real(1, t) + 0.362*States_real(1, t)^2 -0.388*States_real(1, t)^3 + 0.1457*States_real(1, t)^4;
        % Observed voltage/current with observation error
        UL_ob_EKF = UOC_real - States_real(2, t) - I_real(1, t) * Rint_real + sqrt(R) * randn;
        I_ob = I_real(t) + (0.01 * Capacity) * randn;

        %% AH process -----------------------------------------------
        SoC_AH(1, T) = SoC_AH(1, T-1) - ts / (Capacity * 3600) * I_ob;

        %% EKF process ----------------------------------------------
        % predict

        Rp1 = 0.035 + 0.0844*SoC_EKF(1, T-1) - 0.302*SoC_EKF(1, T-1)^2 + 0.372*SoC_EKF(1, T-1)^3 - 0.141*SoC_EKF(1, T-1)^4;
        Rp2 = -0.6024 + 12.04*SoC_EKF(1, T-1) - 43.66*SoC_EKF(1, T-1)^2 + 61.29*SoC_EKF(1, T-1)^3 - 29.34*SoC_EKF(1, T-1)^4;
        Cp1 = 4.692 + 2.813*SoC_real(1, t-1) - 26.27*SoC_real(1, t-1)^2 + 115.2*SoC_real(1, t-1)^3 - 264.8*SoC_real(1, t-1)^4;
        Cp2 = -271.3 + 8012*SoC_real(1, t-1) - 68710*SoC_real(1, t-1)^2 + 278600*SoC_real(1, t-1)^3 - 60000*SoC_real(1, t-1)^4;

        
        tao = Rp1*Cp1 + Rp2*Cp2;

        A = [1 0; 0 exp(-ts / tao)];  % matrix A
        B = [-ts / (Capacity * 7000); (Rp1+Rp2) * (1 - exp(-ts / tao))];  % matrix B
        States_pre = A * States_upd(:, T - 1) + B * I_ob;  % state prediction
        SoC_pre = States_pre(1, 1);  % predict of soc
        Up_pre = States_pre(2, 1);  % prediction of update
        P_Cov = A * P_Cov * A' + [Qs 0; 0 Qu];
             
        UOC_pre = 3.11 + 3.3296*SoC_pre - 8.294*SoC_pre^2 + 9.491*SoC_pre^3 -3.437*SoC_pre^4;
        Ro_pre = 0.24 - 0.1413*SoC_pre + 0.362*SoC_pre^2 -0.388*SoC_pre^3 + 0.1457*SoC_pre^4;
        
        
        UL_pre = UOC_pre - Up_pre - I_ob * Ro_pre;
        % linearization
        C1 = 1.71448 - 2 * 3.51247 * SoC_EKF(1,T-1) + 3 * 5.70868 * SoC_EKF(1, T-1)^2 - 4 * 5.06869 * SoC_EKF(1, T-1)^3 + 5 * 1.86699 * SoC_EKF(1, T-1)^4;
        C = [C1 -1];
        % update
        K = P_Cov * C' * (C * P_Cov * C' + R)^(-1);  % kalman gain matrix
        States_upd(:, T) = States_pre + K * (UL_ob_EKF - UL_pre);
        P_Cov = P_Cov - K * C * P_Cov;
        SoC_EKF(1, T) = States_upd(1, T);
        
        %% Error ----------------------------------------------------
        Err_AH(1, T) = SoC_real(1, t) - SoC_AH(1, T);
        Err_EKF(1, T) = SoC_real(1, t) - SoC_EKF(1, T);
    end 
    
    avr_err_EKF = mean(Err_EKF);
    std_err_EKF = std(Err_EKF,0);
    
    %% Display ------------------------------------------------------
    T = 1 : N;
    figure;
    subplot(2,1,1);
    plot(T, SoC_real(1, 1:(ts/tr):(N*ts/tr-1)), 'LineWidth',2);
    hold on;
    plot(T, SoC_AH(1, 1:N), '-.r', T, SoC_EKF(1,1:N), '-.g');
    grid on;
    xlabel('t(s)');
    ylabel('SOC');
    legend('SoC-Real', 'SoC-EKF', 'SoC-Ah');
    subplot(2,1,2);
    plot(T, Err_AH(1, 1:N), '-r', T, Err_EKF(1,1:N), '-.g');
    hold on;
    grid on;
    xlabel('t(s)');
    ylabel('error');
    legend('Err-EKF', 'Err-Ah', 'Location', 'Best');
